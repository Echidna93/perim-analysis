elevation=as.numeric(elevation))
points <- data.frame(lat=as.numeric(coords["lat", ]),
lon=as.numeric(coords["lon", ]),
elevation=as.numeric(elevation))
points <- data.frame(lat=as.numeric(coords["lat", ]),
lon=as.numeric(coords["lon", ]),
elevation=as.numeric(elevation))
coords
gpx
coords
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlParse(file="S-S09-DEP.GPX")
gpxPTS <- xmlToDataFrame(gpxXML)
gpxPTS
gpxXML
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlParse(file="S-S09-DEP.GPX")
gpxXML
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
gpxPTS <- xmlToDataFrame(gpxXML)
gpxPTS
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
gpxXML
xpathSApply(gpxXML, path="//trkpt", fun=xmlAttrs)
coords<-xpathSApply(gpxXML, path="//trkpt", fun=xmlAttrs)
coords
coords<-xpathSApply(gpxXML, path="//wpt", fun=xmlAttrs)
coords
coords<-xpathSApply(gpxXML, path="//wpt//lat", fun=xmlAttrs)
coords
coords<-xpathSApply(gpxXML, path="//wpt/lat", fun=xmlAttrs)
coords
coords<-xpathSApply(gpxXML, fun=xmlAttrs)
coords<-xmlAttrs(xmlRoot(gpxXML)['wpt'])
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlTreeParse(file="S-S09-DEP.GPX")
coords<-xmlAttrs(xmlRoot(gpxXML)['wpt'])
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
xml<-system.file("S-S09-DEP.GPX", packages="XML")
gpxXML<-xmlTreeParse(xml)
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
xml<-system.file("S-S09-DEP.GPX", packages="XML")
gpxXML<-xmlTreeParse(xml)
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
xml<-system.file("S-S09-DEP.GPX")
xml
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
# elevation <- xpathSApply(doc = gpx, path = "//trkpt/ele", fun = xmlValue)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
gpxXML['wpt']
attr(gpxXML)
xmlSize(gpxXML)
xmlSize(root(gpxXML))
gpxXML['wpt']
gpxXML['wpt'][1]
gpxXML[[1]]
gpxXML[['wpt']]
gpxXML['wpt']
gpxXML['wpt'][1]
xmlRoot(gpxXML)
xmlRoot(gpxXML)['wpt']
xmlattrs(xmlRoot(gpxXML))
xmlNode('wpt', attrs=c("lat", "lon"))
getNodeSet(gpxXML)
getNodeSet(gpxXML, "//wpt")
getNodeSet(gpxXML, "//wpt")[1]
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttr)
# let's load up our GPX points
gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttr)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs("wpt"))
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs("//wpt"))
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlValue)
elevation
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "//", fun = xmlValue)
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "/", fun = xmlValue)
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
elevation
# let's load up our GPX points
# gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
# let's load up our GPX points
gpx <- xmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
coords
# let's load up our GPX points
gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
coords
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
coords[1]
coords[1,1]
coords[1,2]
coords[2,2]
coords$lat
coords[1,]lat
coords[1,]
coords[1,1]
coords[1,2]
coords[1,3]
# make cleaner df
data.frame(name=gpxXML$name,
time=gpxXML$time
lat=coords[1,])
# make cleaner df
data.frame(name=gpxXML$name,
time=gpxXML$time,
lat=coords[1,])
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
gpxPTS <- xmlToDataFrame(gpxXML)
# make cleaner df
data.frame(name=gpxXML$name,
time=gpxXML$time,
lat=coords[1,])
gpxXML
gpxPTS
# make cleaner df
data.frame(name=gpxPTS$name,
time=gpxPTS$time,
lat=coords[1,])
gpxPTS
# make cleaner df
gpxPTS<- gpxPTS[-1,]
gpxPTS
data.frame(name=gpxPTS$name,
time=gpxPTS$time,
lat=coords[1,])
htmlTreeParse()
gpxPTS
data.frame(name=gpxPTS$name,
time=gpxPTS$time,
lat=coords[1,],
lon=coords[2,],
ele=gpxPTS$ele
)
gpxDF<-data.frame(name=gpxPTS$name,
time=gpxPTS$time,
lat=coords[1,],
lon=coords[2,],
ele=gpxPTS$ele
)
gpxDF
# grab the extent of our farm
farm.extent<-extent(farm.full)
# buffer the extent so that we don't cut off the farm
farm.extent<-extend(farm.extent, 100)
# crop our lc dataset to the buffered extent
lc.cropped<-crop(landcover, farm.extent) %>%
st_as_stars() %>%
st_as_sf()
# I'd put whatever raster you're using there
rast_path <- "C:/Users/jackx/Desktop/nlcd-landcover/nlcd-landcover.tif"
# read in raster
landcover<-raster(rast_path)
# I'd put whatever raster you're using there
rast_path <- "C:/Users/jackx/Desktop/landcover-tif/clipped-area/clipped-area.tif"
# read in raster
landcover<-raster(rast_path)
# grab the extent of our farm
farm.extent<-extent(farm.full)
# buffer the extent so that we don't cut off the farm
farm.extent<-extend(farm.extent, 100)
# crop our lc dataset to the buffered extent
lc.cropped<-crop(landcover, farm.extent) %>%
st_as_stars() %>%
st_as_sf()
# buffer the full farm shp
farm.full
farm.buff<-farm.full %>%
st_buffer(30) # buffer by 30m
# subtract the buffered farm from the original shp
farm.fenceline.buff<-st_difference(farm.buff, farm.full)
# intersect our fencline and our cropped landcover tif
lc.fenceline<-st_intersection(lc.cropped, farm.fenceline.buff)
# convert back to raster so we can use sampleStratified
lc.fenceline.rast<-st_rasterize(lc.fenceline)
lc.fenceline.rast<-as(lc.fenceline.rast, "Raster")
lc.fenceline.rast
plot(lc.fenceline.rast)
plot(lc.fenceline.rast$clipped.area)
plot(lc.fenceline.rast) +
points(c(gpxDF$lon, gpxDF$lat))
plot(lc.fenceline.rast) +
points(c(gpxDF$lat, gpxDF$lon))
plot(c(gpxDF$lat, gpxDF$lon))
plot(lc.fenceline.rast) +
points(c(gpxDF$lat, gpxDF$lon))
plot(lc.fenceline.rast) +
points(c(gpxDF$lat, gpxDF$lon), pch=19)
plot(lc.fenceline.rast) +
points(c(gpxDF$lat, gpxDF$lon), pch=19)
plot(lc.fenceline.rast$clipped.area) +
points(c(gpxDF$lat, gpxDF$lon), pch=19)
plot(lc.fenceline.rast$clipped.area) +
points(c(gpxDF$lat, gpxDF$lon), pch=19, col="black")
gpxDF$lat
gpxDF$lon
plot(lc.fenceline.rast$clipped.area) +
points(c(gpxDF$lat[1], gpxDF$lon[1]), pch=19, col="black")
plot(lc.fenceline.rast$clipped.area) +
points(c(as.numeric(gpxDF$lat[1]), as.numeric(gpxDF$lon[1])), pch=19, col="black")
coords
# need to convert to the same CRS
coords<-data.frame(lat=coords[1,], lon=coords[2,])
coords
spTransform(coords, CRS=utm)
coordinates(coords)<-c("lat","lon")
coordinates(as.numeric(coords))<-c("lat","lon")
as.numeric(coords)
as.numeric(coords[1,])
# need to convert to the same CRS
coords<-data.frame(lat=coords[1,], lon=coords[2,])
for(i in 1:nrow(coords)){
coords[i,]<-as.numeric(coords[i,])
}
coords
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
# need to convert to the same CRS
coords<-data.frame(lat=coords[1,], lon=coords[2,])
coords
coordinates(as.numeric(coords))<-c("lat","lon")
coordinates(coords)<-c("lat","lon")
lc.fenceline.rast <- spTransform(lc.fenceline.rast, crs("+proj=longlat"))
lonlat<-CRS("+proj=longlat")
lc.fenceline.rast <- spTransform(lc.fenceline.rast, lonlat)
lc.fenceline.rast <- spTransform(lc.fenceline.rast$clipped.area, lonlat)
lc.fenceline.rast <- spTransform(lc.fenceline.rast$clipped.area, lonlat)
lcFencelineSF<-st_as_sf(lc.fenceline.rast)
lcFencelineSF<-st_as_sf(lc.fenceline.rast$clipped.area)
library("sf")
lcFencelineSF<-st_as_sf(lc.fenceline.rast$clipped.area)
lcFencelineSF<-sp_as_sf(lc.fenceline.rast$clipped.area)
lcFencelineSF<-sp_as_sf(lc.fenceline.rast$clipped.area)
library(stars)
lcFencelineSF<-sp_as_sf.stars(st_as_stars(lc.fenceline.rast$clipped.area))
lcFencelineSF<-st_as_sf.stars(st_as_stars(lc.fenceline.rast$clipped.area))
coordinates(coords)<-c("+proj=longlat")
st_transform(coords, CRS=utm)
coordinates(coords)<-c("+proj=longlat")
coordinates(coords)<-c("lat", "lon")
for(i in 1:nrow(coords)){
for(j in 1:ncol(coords)){
coords[i,j]<-as.numeric(coords[i,j])
}
}
coords
coordinates(coords)<-c("lat", "lon")
coordinates(coords)<-c("x", "y")
# need to convert to the same CRS
coords<-data.frame(lon=coords[2,], lat=coords[1,])
coords
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
# need to convert to the same CRS
coords<-data.frame(lon=coords[2,], lat=coords[1,])
coords
coordinates(coords)<-c("lon", "lat")
coordinates(coords)<-c("lon", "lat")
coordinates(coords)<- ~lat + lon
# need to convert to the same CRS
lat<-as.numeric(coords[1,])
lon<-as.numeric(coords[2,])
coordinates(coords)<- ~lat + lon
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
# need to convert to the same CRS
lat<-as.numeric(coords[1,])
lon<-as.numeric(coords[2,])
coordinates(coords)<- ~lat + lon
# need to convert to the same CRS
lat<-as.numeric(as.character(coords[1,]))
lon<-as.numeric(as.character(coords[2,]))
lat
lon
coords
coordinates(coords)<- SpatialPoints(cbind(gpxDF$lat,gpxDF$lon), CRS=utm)
coords<- SpatialPoints(cbind(gpxDF$lat,gpxDF$lon), proj4string = utm)
gpxDF$lat <- as.numeric(gpxDF$lat)
gpxDF$lon <- as.numeric(gpxDF$lon)
coords<- SpatialPoints(cbind(gpxDF$lat,gpxDF$lon), proj4string = utm)
coords<- SpatialPoints(cbind(gpxDF$lat,gpxDF$lon), proj4string = CRS("+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs"))
coords
# let's load up our GPX points
gpx <- htmlTreeParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
elevation <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
# points <- data.frame(lat=as.numeric(coords["lat", ]),
#                      lon=as.numeric(coords["lon", ]),
#                      elevation=as.numeric(elevation))
gpxXML<-xmlParse(file="S-S09-DEP.GPX", useInternalNodes = TRUE)
gpxPTS <- xmlToDataFrame(gpxXML)
# make cleaner df
gpxPTS<- gpxPTS[-1,] # remove first row
# create df
gpxDF<-data.frame(name=gpxPTS$name,
time=gpxPTS$time,
lat=coords[1,],
lon=coords[2,],
ele=gpxPTS$ele
)
gpxDF$lat <- as.numeric(gpxDF$lat)
gpxDF$lon <- as.numeric(gpxDF$lon)
coords<- SpatialPointsDataFrame(cbind(gpxDF$lat,gpxDF$lon), proj4string = CRS("+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs"))
coords<- SpatialPoints(cbind(gpxDF$lat,gpxDF$lon), proj4string = CRS("+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs"))
coords[1]
coords[1,]
coords[[1]]
coords<- st_as_sf(cbind(gpxDF$lat,gpxDF$lon), proj4string = CRS("+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs"))
?st_as_sf
?st_point
?st_points
coords<- SpatialPoints(cbind(gpxDF$lat,gpxDF$lon), proj4string = CRS("+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs"))
coords
coords <- data.frame(lat=gpxDF$lat, lon=gpxDF$lon)
coordinates(coords2) <- c("lat", "lon")
coordinates(coords) <- c("lat", "lon")
coords
coords <- data.frame(lat=gpxDF$lat, lon=gpxDF$lon)
coordinates(coords) <- c("lat", "lon")
coords
# coords <- xpathSApply(doc=gpx, path="//trkpt", fun=xmlAttrs)
coords <- xpathSApply(doc = gpx, path = "//wpt", fun = xmlAttrs)
# create df
gpxDF<-data.frame(name=gpxPTS$name,
time=gpxPTS$time,
lat=coords[1,],
lon=coords[2,],
ele=gpxPTS$ele
)
gpxDF$lat <- as.numeric(gpxDF$lat)
gpxDF$lon <- as.numeric(gpxDF$lon)
cords <- data.frame(lat=gpxDF$lat, lon=gpxDF$lon)
coordinates(cords) <- c("lat", "lon")
cords
proj4string(cords) <- CRS("+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs")
cords
proj4string(cords) <- CRS("+init=epsg:32615")
cords <- spTransform(cords, CRS("+init=epsg:32615"))
cords
gpxDF$lat <- as.numeric(gpxDF$lat)
gpxDF$lon <- as.numeric(gpxDF$lon)
cords <- data.frame(lat=gpxDF$lat, lon=gpxDF$lon)
coordinates(cords) <- c("lat", "lon")
cords <- spTransform(cords, CRS("+init=epsg:32615"))
spTransform
?spTransform
cords <- spTransform(cords, crs("+init=epsg:32615"))
cords <- data.frame(lat=gpxDF$lat, lon=gpxDF$lon)
gpxDF$lat <- as.numeric(gpxDF$lat)
gpxDF$lon <- as.numeric(gpxDF$lon)
cords <- data.frame(lat=gpxDF$lat, lon=gpxDF$lon)
cords <- spTransform(cords, crs("+init=epsg:32615"))
gpxDF
cords <- spTransform(cords, crs("+datum=WGS84 +init=epsg:32615"))
gpxDF$lat <- as.numeric(gpxDF$lat)
gpxDF$lon <- as.numeric(gpxDF$lon)
cords <- data.frame(lat=gpxDF$lat, lon=gpxDF$lon)
cords <- spTransform(cords, crs("+datum=WGS84 +init=epsg:32615"))
st_transform(cbind(gpxDF$lat, gpxDF$lon), "+proj=latlon", "+init=epsg:32615")
st_transform(c(gpxDF$lat, gpxDF$lon), "+proj=latlon", "+init=epsg:32615")
proj4string(lc.fenceline.lon) <- CRS("+proj=longlat")
proj4string(lc.fenceline.rast$clipped.area) <- CRS("+proj=longlat")
proj4string(lc.fenceline.rast$clipped.area) <- CRS("+proj=longlat +datum=WGS84")
lc.fenceline.ll <- project(lc.fenceline.rast$clipped.area, "+proj=longlat +datum=WGS84")
lc.fenceline.ll <- project(lc.fenceline.rast, "+proj=longlat +datum=WGS84")
lc.fenceline.ll <- projectRaster(lc.fenceline.rast, "+proj=longlat +datum=WGS84")
lc.fenceline.ll <- projectRaster(lc.fenceline.rast, crs="+proj=longlat +datum=WGS84")
lc.fenceline.ll
lc.fenceline.ll <- projectRaster(lc.fenceline.rast$clipped.area, crs="+proj=longlat +datum=WGS84")
lc.fenceline.ll <- projectRaster(lc.fenceline.rast, crs="+proj=longlat +datum=WGS84")
plot(lc.fenceline.ll$clipped.area)
plot(lc.fenceline.rast$clipped.area) +
points(c(gpxDF$lat[1], gpxDF$lon[1]), pch=19, col="black")
plot(lc.fenceline.rast$clipped.area) +
points(c(gpxDF$lat, gpxDF$lon), pch=19, col="black")
plot(lc.fenceline.ll$clipped.area) +
points(c(gpxDF$lat, gpxDF$lon), pch=19, col="black")
plot(lc.fenceline.ll) +
points(c(gpxDF$lat, gpxDF$lon), pch=19, col="black")
plot(lc.fenceline.ll) +
points(c(gpxDF$lat, gpxDF$lon), pch=19, col="black")
gpxDF$lat
plot(lc.fenceline.ll) +
points(c(gpxDF$lat, gpxDF$lon), pch=19, col="black")
plot(lc.fenceline.ll$clipped.area)
plot(lc.fenceline.ll$clipped.area) +
points(c(gpxDF$lat, gpxDF$lon), pch=19, col="black")
plot(lc.fenceline.ll$clipped.area) +
points(c(gpxDF$lat, gpxDF$lon), pch=19, col="black")
plot(lc.fenceline.ll$clipped.area) +
points(c(gpxDF$lon, gpxDF$lat), pch=19, col="black")
c(gpxDF$lat, gpxDF$lon)
cbind(gpxDF$lat, gpxDF$lon)
plot(lc.fenceline.ll$clipped.area) +
points(cbind(gpxDF$lon, gpxDF$lat), pch=19, col="black")
# now can extract landscape values at the points
extract(lc.fenceline.rast$clipped.area, cbind(gpxDF$lon, gpxDF$lat))
# now can extract landscape values at the points
extract(lc.fenceline.rast, cbind(gpxDF$lon, gpxDF$lat))
# now can extract landscape values at the points
extract(lc.fenceline.ll, cbind(gpxDF$lon, gpxDF$lat))
# now can extract landscape values at the points
extract(lc.fenceline.ll$clipped.area, cbind(gpxDF$lon, gpxDF$lat))
# now can extract landscape values at the points
clipped.hist<-extract(lc.fenceline.ll$clipped.area, cbind(gpxDF$lon, gpxDF$lat))
plot(lc.fenceline)
plot(farm.fenceline.buff)
plot(farm.full)
lc.full <- st_intersection(lc.cropped, farm.full)
plot(farm.full)
plot(lc.full)
# lcFencelineSF<-st_as_sf.stars(st_as_stars(lc.fenceline.rast$clipped.area))
# proj4string(lc.fenceline.rast$clipped.area) <- CRS("+proj=longlat +datum=WGS84")
lcFarmLonLat <- projectRaster(lc.full, crs="+proj=longlat +datum=WGS84")
# lcFencelineSF<-st_as_sf.stars(st_as_stars(lc.fenceline.rast$clipped.area))
# proj4string(lc.fenceline.rast$clipped.area) <- CRS("+proj=longlat +datum=WGS84")
lcFarmLonLat <- projectRaster(lc.full, crs="+proj=longlat +datum=WGS84")
lc.full <- st_rasterize(lc.full)
lc.full
lc.full <- as(lc.full, "Raster")
# lcFencelineSF<-st_as_sf.stars(st_as_stars(lc.fenceline.rast$clipped.area))
# proj4string(lc.fenceline.rast$clipped.area) <- CRS("+proj=longlat +datum=WGS84")
lcFarmLonLat <- projectRaster(lc.full, crs="+proj=longlat +datum=WGS84")
# now can extract landscape values at the points
clipped.hist<-extract(lcFarmLonLat, cbind(gpxDF$lon, gpxDF$lat))
hist(clipped.hist)
