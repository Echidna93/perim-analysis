## estimate year over year population growth (lambda) as abund[i+1,4]/abund[i,4] and store this value in col 8
abund3[t+1, 8] <- (abund3[t+1, 4] / abund3[t,4])
}
(abund3)
plot(abund3[,8]~abund3[,7])
plot(abund3[,8]~abund3[,5])
plot(abund3[,8]~abund3[,5], xlab="fledgling success", ylab="lambda", main="lambda v fledgling success")
plot(abund3[,8]~abund3[,6], xlab="juvenile success", ylab="lambda", main="lambda v juvenile success")
plot(abund3[,8]~abund3[,5], xlab="fledgling success", ylab="lambda", main="lambda v fledgling success")
label(x)
plot(abund3[,8]~abund3[,5], xlab="fledgling success", ylab="lambda", main="lambda v fledgling success")
plot(abund3[,8]~abund3[,6], xlab="juvenile success", ylab="lambda", main="lambda v juvenile success")
plot(abund3[,8]~abund3[,6], xlab="adult success", ylab="lambda", main="lambda v adult success")
plot(abund3[,8]~abund3[,5], xlab="fledgling success", ylab="lambda", main="lambda v fledgling success")
plot(abund3[,8]~abund3[,6], xlab="juvenile success", ylab="lambda", main="lambda v juvenile success")
plot(abund3[,8]~abund3[,7], xlab="adult success", ylab="lambda", main="lambda v adult success")
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
conda_remove("cv")
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
conda_list()
conda_remove("base")
conda_deactivate("base")
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
?as.geodata
??as.geodata
install_tensorflow(envname="image-recog")
virtualenv_list()
library(reticulate)
virtualenv_list()
use_condaenv("image-recog")
# base r get labels based on user defined classes
tf$constant("Hello Tensorflow!")
install_tensorflow(envname="image-recog")
install_keras(envname="image-recog")
label_list <- dir('images/train/')
output_n <- length(label_list)
save(label_list, file="label_list.R")
# rescale and normalize our image sizes
width <- 224
height <- 224
target_size <- c(width, height)
rgb <- 3
path_train <- "images/train/"
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
?image_data_generator
??image_data_generator
conda_install(envname="keras")
conda_install(envname="image-recog", "keras")
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
use_condaenv("image-recog")
library(keras)
library(tensorflow)
# base r get labels based on user defined classes
tf$constant("Hello Tensorflow!")
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
install_tensorflow(envname="image-recog")
# first time set up for our venv
conda_install(envname="image-recog", "tensorflow")
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
conda_python()
# first time set up for our venv
conda_install(envname="image-recog", "tensorflow")
py_config()
py_config()
conda_python
conda_version()
conda_exe()
python_version()
py_available()
py_version()
Sys.setenv(RETICULATE_PYTHON="/mnt/c/Users/jackx/AppData/Local/Programs/Python/Python310")
py_version()
use_python('/mnt/c/Users/jackx/AppData/Local/Programs/Python/Python310')
use_python('/Users/jackx/AppData/Local/Programs/Python/Python310')
use_python('Users/jackx/AppData/Local/Programs/Python/Python310')
use_python('Users/jackx/AppData/Local/Programs/Python/Python310/python.exe')
py_version()
reticulate::py_versions_windows()
py_config()
py_versions_windows()$install_path
py_versions_windows()$install_path[2]
virtualenv_remove('image-recog')
Y
virtualenv_create(envname = "image-recog",python=reticulate::py_versions_windows()$install_path[2])
virtualenv_create(envname = "image-recog",python=reticulate::py_versions_windows
?virtualenv_create
# configure python
# create our venv
py_path<-"/mnt/c/Users/jackx/AppData/Local/Programs/Python/Python310"
virtualenv_create(envname = "image-recog",python=py_path)
# configure python
# create our venv
py_path<-"/mnt/c/Users/jackx/AppData/Local/Programs/Python/Python310/python.exe"
virtualenv_create(envname = "image-recog",python=py_path)
# configure python
# create our venv
py_path<-"c/Users/jackx/AppData/Local/Programs/Python/Python310/python.exe"
virtualenv_create(envname = "image-recog",python=py_path)
# configure python
# create our venv
py_path<-"c/Users/jackx/AppData/Local/Programs/Python/Python310"
virtualenv_create(envname = "image-recog",python=py_path)
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
virtualenv_create(envname = "image-recog", version=NULL)
# configure python
# create our venv
library(reticulate)
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
virtualenv_create(envname = "image-recog", version=NULL)
# first time set up for our venv
conda_install(envname="image-recog", "tensorflow")
conda_python()
conda_remove("image-recog")
install.packages("reticulate")
install.packages("reticulate")
# configure python
# create our venv
library(reticulate)
py_config()
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
virtualenv_create(envname = "image-recog", version=NULL)
# first time set up for our venv
conda_install(envname="image-recog", "tensorflow")
# first time set up for our venv
library(tensorflow)
install_tensorflow(envname="image-recog")
virtualenv_list()
# first time set up for our venv
use_virtualenv("image-recog")
# first time set up for our venv
use_virtualenv("image-recog", python=NULL)
?use_virtualenv
# first time set up for our venv
use_python()
# first time set up for our venv
use_python(py_config())
py_config()
py_config()$pythonhome
# first time set up for our venv
use_python(py_config()$pythonhome)
library(tensorflow)
install_tensorflow(envname="image-recog")
library(tensorflow)
py_version()
virtualenv_list()
virtualenv_root()
# first time set up for our venv
use_virtualenv(virtualenv="image-recog")
# configure python
# create our venv
library(reticulate)
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
use_virtualenv(envname = "image-recog", version=NULL)
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
use_virtualenv(envname = "image-recog")
# use_virtualenv(envname = "image-recog")
# first time set up for our venv
use_python(py_config()$pythonhome)
# library(tensorflow)
virtualenv_create("image-recog")
virtualenv_install("image-recog", "tensorflow")
virtualenv_install("image-recog", "keras")
library(tensorflow)
library(keras)
# verify our installation
tf$constant('hellow')
library(tensorflow)
# verify our installation
tf$constant('hellow')
label_list <- dir('images/train/')
output_n <- length(label_list)
save(label_list, file="label_list.R")
# rescale and normalize our image sizes
width <- 224
height <- 224
target_size <- c(width, height)
rgb <- 3
path_train <- "images/train/"
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
install_tensorflow()
use_condaenv("image-recog")
library(keras)
library(keras)
library(tensorflow)
install_tensorflow()
# configure python
# create our venv
library(reticulate)
virtualenv_remove("image-recog")
y
Y
# configure python
# create our venv
library(reticulate)
# library(tensorflow)
virtualenv_create("image-recog")
library(tensorflow)
library(keras)
install_tensorflow()
install_tensorflow(envname = 'image-recog')
virtualenv_remove('image-recog')
Y
library(reticulate)
# use_virtualenv(envname = "image-recog")
# first time set up for our venv
use_python(py_config()$pythonhome)
# library(tensorflow)
virtualenv_create("image-recog")
library(tensorflow)
library(tensorflow)
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install.packages("keras")
virtualenv_remove("image-recog")
Y
# rename files
path = "F:\\w\\S01\\A09C\\100EK113"
files<-list.files(path)
files
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
?file.rename
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
files
# rename files
path = "F:\\w\\S01\\A09C\\101EK113"
files<-list.files(path)
files
# rename files
path = "F:\\w\\S01\\A09C\\100EK113"
files<-list.files(path)
files
for(i in 1:length(files)){
file.rename(paste0(path, "\\", files[i]),
paste0(path, "\\", paste0("w", "S01","A09C","B1", i, sep="-")))
}
path = "F:\\w\\S01\\A09C\\101EK113"
files<-list.files(path)
for(i in 1:length(files)){
file.rename(paste0(path, "\\", files[i]),
paste0(path, "\\",
paste0("w","-", "S01", "-","A09C","-","B1", i)))
}
path = "F:\\w\\S01\\A09C\\102EK113"
files<-list.files(path)
file.rename(paste0(path, "\\", files[1]),
paste0(path, "\\",
paste0("w","-", "S01", "-","A09C","-","B1", i)))
file.rename(paste0(path, "\\", files[2]),
paste0(path, "\\",
paste0("w","-", "S01", "-","A09C","-","B1", i, ".JPG")))
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
path = "F:\\w\\S01\\A17\\100EK113"
path.s<-strsplit(path)
path.s<-strsplit(path, split="\\")
path.s
strsplit
?strsplit
path.s<-strsplit(path, split="\\")
path = "F:\\w\\S01\\A17C\\100EK113"
path.split<-strsplit(path, "\\\\")
path.split
path.split[1]
path.split[[1]]
path.split[[1]][1]
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
library(prism)
prism_archive_subset("tmin", "daily")
?prism_archive_subset
prism_get_dl_dir("C:/Users/jackx022/Desktop/prism-datf")
?prism_get_dl_dir
prism_get_dl_dir("C:/Users/jackx022/Desktop/prism-dat-
f")
prism_get_dl_dir("C:/Users/jackx022/Desktop/prism-dat-f")
prism_get_dl_dir("C:\\Users\\jackx022\\Desktop\\prism-dat-f")
prism_get_dl_dir("C:\\Users\\jackx022\\Desktop\\prism-dat-f", create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f", create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f",
create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f",
create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
prism_set_dl_dir("C:\\Users\\jackx022\\Desktop\\prism-dat-f", create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
prism_archive_subset("tmin", "daily")
?prism_archive_subset
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
prism_archive_subset("tmin",
"daily")
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
p<-prism_archive_subset("tmin",
"daily")
p
prism_get_dl_dir()
prism_archive_verify()
prism_archive_verify("tmin")
?prism_archive_verify
prism_archive_verify("tmin", "daily")
?prism_archive_subset
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
p<-prism_archive_subset("tmin",
"daily",
minDate="1999-11-01",
maxDate="2022-05-31")
p
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
p<-prism_archive_subset("tmin",
minDate="1999-11-01",
maxDate="2022-05-31")
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
p<-prism_archive_subset("tmin",
"daily",
minDate="1999-11-01",
maxDate="2022-05-31")
p
prism_arhive_ls()
prism_archive_ls()
prism_set_dl_dir("C:\\Users\\jackx022\\Desktop\\prism-dat-f", create=FALSE)
prism_archive_ls()
# grab our prism data
# first we need to set our path for where we want prism to store the data
prism_set_dl_dir('C:\\Users\\jackx\\Desktop\\prism-dat-f') # only set to create =TRUE if we need to download again
library(prism)
# grab our prism data
# first we need to set our path for where we want prism to store the data
prism_set_dl_dir('C:\\Users\\jackx\\Desktop\\prism-dat-f') # only set to create =TRUE if we need to download again
get_prism_dailys(type="tmin",
minDate="1999-11-01",
maxDate="2022-05-31",
keepZip = TRUE)
get_prism_dailys(type="tmin",
minDate="2012-11-01",
maxDate="2022-05-31",
keepZip = TRUE)
?prism_archive_subset
setwd("C:/Users/jackx/Desktop/perim-analysis")
knitr::opts_chunk$set(echo = TRUE)
# create three buffer distances
buffDistSmall <- 1000 # 1km
buffDistMed <- 3000 # 3km
buffDistMed <- 3000 # 3km
buffDistLrg <- 5000 # 5km
# create three buffer distances
buffDistSml <- 1000 # 1km
farmBuffSml<-farm.full %>%
st_buffer(buffDistSml) # buffer by 30m
library("rgdal")
library("raster")
library("sf")
library("leafsync")
library(stars)
library("dplyr")
library("ggplot2")
library("stars")
library(XML)
library(spatialEco)
library(spatstat.random)
library(landscapemetrics)
library(maps)
farmBuffSml<-farm.full %>%
st_buffer(buffDistSml) # buffer by 30m
shp_path <- "./chad-jelinek.shp"
rast_path <- "C:/Users/jackx/Desktop/landcover-tif/clipped-area/clipped-area.tif"
# read in raster
landcover<-raster(rast_path)
#  read in shp file
farm.full<-st_read(shp_path)
# grab the extent of our farm
farm.extent<-extent(farm.full)
# buffer the extent so that we don't cut off the farm
farm.extent<-extend(farm.extent, 100)
# crop our lc dataset to the buffered extent
lc.cropped<-crop(landcover, farm.extent) %>%
st_as_stars() %>%
st_as_sf()
# buffer the extent so that we don't cut off the farm
# buffer this by twice the largest buffer extent
farm.extent<-extend(farm.extent, buffDistLrg*2)
# crop our lc dataset to the buffered extent
lc.cropped<-crop(landcover, farm.extent) %>%
st_as_stars() %>%
st_as_sf()
farmBuffSml<-farm.full %>%
st_buffer(buffDistSml) # buffer by 30m
# subtract the buffered farm from the original shp
farm.fenceline.buff<-st_difference(farm.buff, farm.full)
# subtract the buffered farm from the original shp
farm.fenceline.buff<-st_difference(farmBuffSml, farm.full)
# intersect our fencline and our cropped landcover tif
lc.fenceline<-st_intersection(lc.cropped, farm.fenceline.buff)
lc.full <- st_intersection(lc.cropped, farm.full)
# convert back to raster so we can use sampleStratified
lc.fenceline.rast<-st_rasterize(lc.fenceline)
lc.full <- st_rasterize(lc.full)
lc.fenceline.rast<-as(lc.fenceline.rast, "Raster")
lc.full <- as(lc.full, "Raster")
plot(lc.full)
# intersect our fencline and our cropped landcover tif
lc.fenceline<-st_intersection(lc.cropped, farmBuffSml)
lc.full <- st_intersection(lc.cropped, farm.full)
lc.full <- st_intersection(lc.cropped, farm.full)
# convert back to raster so we can use sampleStratified
lc.fenceline.rast<-st_rasterize(lc.fenceline)
lc.full <- st_rasterize(lc.full)
lc.fenceline.rast<-as(lc.fenceline.rast, "Raster")
lc.fenceline.rast<-as(lc.fenceline.rast, "Raster")
lc.full <- as(lc.full, "Raster")
plot(lc.full)
farmBuffLrg<-farm.full %>%
st_buffer(buffDistLrg) # buffer by 30m
farmBuffMed<-farm.full %>%
st_buffer(buffDistMed) # buffer by 30m
lcFenclineMed<-st_intersection(lc.cropped, farmBuffMed)
lcFenclineMed<-st_intersection(lc.cropped, farmBuffMed)
lcFenclineLrg<-st_intersection(lc.cropped, farmBuffLrg)
lcFullSml <- st_intersection(lc.cropped, lcFenclineSml)
# intersect our fencline and our cropped landcover tif
lcFenclineSml<-st_intersection(lc.cropped, farmBuffSml)
# intersect our fencline and our cropped landcover tif
lcFenclineSml<-st_intersection(lc.cropped, farmBuffSml)
lcFenclineMed<-st_intersection(lc.cropped, farmBuffMed)
lcFenclineLrg<-st_intersection(lc.cropped, farmBuffLrg)
# intersect our fencline and our cropped landcover tif
lcFullSml<-st_intersection(lc.cropped, farmBuffSml)
# intersect our fencline and our cropped landcover tif
lcFullSml<-st_intersection(lc.cropped, farmBuffSml)
lcFullMed<-st_intersection(lc.cropped, farmBuffMed)
lcFullLrg<-st_intersection(lc.cropped, farmBuffLrg)
# lcFullSml <- st_intersection(lc.cropped, lcFenclineSml)
# lcFullMed <- st_intersection(lc.cropped, lcFenclineMed)
# lcFullLrg <- st_intersection(lc.cropped, lcFenclineLrg)
# convert back to raster so we can use sampleStratified
lcFullSmlRast<-st_rasterize(lcFullSml)
# lcFullSml <- st_intersection(lc.cropped, lcFenclineSml)
# lcFullMed <- st_intersection(lc.cropped, lcFenclineMed)
# lcFullLrg <- st_intersection(lc.cropped, lcFenclineLrg)
# convert back to raster so we can use sampleStratified
lcFullSmlRast<-st_rasterize(lcFullSml)
lcFullMedRast<-st_rasterize(lcFullMed)
lcFullLrgRast<-st_rasterize(lcFullLrg)
plot(lcFullLrgRast)
plot(lcMedRast)
plot(lcFullMedRast)
plot(lcFullSmlRast)
camDat<-read.table(
"./data/camera-data.csv",
sep=",", header=TRUE)
